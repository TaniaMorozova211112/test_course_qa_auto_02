# log_event_module.py
import os
import logging

# üîΩ –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ª–æ–≥-—Ñ–∞–π–ª—É "login_system.log",
# —è–∫–∏–π –±—É–¥–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏—Å—è –≤ —Ç—ñ–π —Å–∞–º—ñ–π –ø–∞–ø—Ü—ñ, —â–æ –π —Å–∞–º —Ñ–∞–π–ª "log_event_module.py"
LOG_FILE = os.path.join(os.path.dirname(__file__), "login_system.log")

# –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –ª–æ–≥–µ—Ä
logger = logging.getLogger("log_event")
logger.setLevel(logging.DEBUG)

# –î–æ–¥–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑
if not logger.handlers:
    file_handler = logging.FileHandler(LOG_FILE, mode='a')
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)

def log_event(username: str, status: str):
    """
        –õ–æ–≥—É—î –ø–æ–¥—ñ—é –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É.
        """
    log_message = f"Login event - Username: {username}, Status: {status}"

    if status == "success":
        logger.info(log_message)
    elif status == "expired":
        logger.warning(log_message)
    else:
        logger.error(log_message)

# üî∏ –†—É—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
if __name__ == "__main__":
    log_event("admin", "success")
    log_event("admin", "expired")
    log_event("admin", "failed")
    log_event("admin", "unknown")
    print(f"–õ–æ–≥–∏ –∑–∞–ø–∏—Å–∞–Ω–æ —É —Ñ–∞–π–ª—ñ: {LOG_FILE}")


